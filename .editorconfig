# editorconfig.org

# top-most EditorConfig file
root = true

# Default settings:
# A newline ending every file
# Use 4 spaces as indentation
[*]
insert_final_newline = true
indent_style = space
indent_size = 4

# C# files
[*.cs]
# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current

# avoid this. unless absolutely necessary
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# prefer var
csharp_style_var_for_built_in_types = true
csharp_style_var_when_type_is_apparent = true
csharp_style_var_elsewhere = true:suggestion

# use language keywords instead of BCL types
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# name all constant fields using PascalCase
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style

dotnet_naming_symbols.constant_fields.applicable_kinds   = field
dotnet_naming_symbols.constant_fields.required_modifiers = const

dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# static fields should have s_ prefix
dotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion
dotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields
dotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style

dotnet_naming_symbols.static_fields.applicable_kinds   = field
dotnet_naming_symbols.static_fields.required_modifiers = static

dotnet_naming_style.static_prefix_style.required_prefix = s_
dotnet_naming_style.static_prefix_style.capitalization = camel_case 

# internal and private fields should be _camelCase
dotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields
dotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style

dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal

dotnet_naming_style.camel_case_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case 

# use accessibility modifiers
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

# Code style defaults
dotnet_sort_system_directives_first = true
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion

# Expression-bodied members
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none

# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion

# Null checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Xaml files
[*.{xaml,axaml}]
indent_style = space
indent_size = 2

# Xml project files
[*.{csproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]
indent_size = 2

# Xml build files
[*.builds]
indent_size = 2

# Xml files
[*.{xml,stylecop,resx,ruleset}]
indent_size = 2

# Xml config files
[*.{props,targets,config,nuspec}]
indent_size = 2

# Shell scripts
[*.sh]
end_of_line = lf
[*.{cmd, bat}]

# ========================================
# ThrowsAnalyzer - Diagnostic Severity Configuration
# ========================================
# Configure severity for all 30 ThrowsAnalyzer diagnostics
# Severity options: error, warning, suggestion, silent, none
# ========================================

# ----------------------------------------
# Category 1: Basic Exception Handling
# ----------------------------------------

# THROWS001: Method contains throw statement (informational)
dotnet_diagnostic.THROWS001.severity = suggestion

# THROWS002: Method contains unhandled throw statement
dotnet_diagnostic.THROWS002.severity = warning

# THROWS003: Method contains try/catch block (informational)
dotnet_diagnostic.THROWS003.severity = suggestion

# THROWS004: Rethrow anti-pattern (throw ex; instead of throw;)
# This resets the stack trace - should be 'throw;'
dotnet_diagnostic.THROWS004.severity = warning

# THROWS007: Unreachable catch clause due to ordering
# Catch clauses must be ordered from most specific to most general
dotnet_diagnostic.THROWS007.severity = warning

# THROWS008: Empty catch block swallows exceptions
# Swallowing exceptions can hide bugs
dotnet_diagnostic.THROWS008.severity = warning

# THROWS009: Catch block only rethrows exception
# Unnecessary catch that adds no value
dotnet_diagnostic.THROWS009.severity = suggestion

# THROWS010: Overly broad exception catch
# Catching System.Exception is too broad - catch specific exceptions
dotnet_diagnostic.THROWS010.severity = suggestion

# ----------------------------------------
# Category 2: Exception Flow Analysis
# ----------------------------------------

# THROWS017: Unhandled method call exception
# Called method throws exception that is not caught or documented
dotnet_diagnostic.THROWS017.severity = warning

# THROWS018: Deep exception propagation (informational)
# Exception propagates through many method calls
dotnet_diagnostic.THROWS018.severity = suggestion

# THROWS019: Undocumented public exception
# Public API throws exception without XML documentation
dotnet_diagnostic.THROWS019.severity = warning

# ----------------------------------------
# Category 3: Async Exception Patterns
# ----------------------------------------

# THROWS020: Async synchronous throw
# Throwing synchronously in async method (before first await)
dotnet_diagnostic.THROWS020.severity = warning

# THROWS021: Async void exception
# async void methods that throw can crash the application
dotnet_diagnostic.THROWS021.severity = error

# THROWS022: Unobserved Task exception
# Task returned but not awaited or observed - exception may be lost
dotnet_diagnostic.THROWS022.severity = warning

# ----------------------------------------
# Category 4: Iterator Exception Patterns
# ----------------------------------------

# THROWS023: Deferred iterator exception
# Exception in yield method is deferred until enumeration
dotnet_diagnostic.THROWS023.severity = warning

# THROWS024: Iterator try-finally timing (informational)
# Try-finally in iterator has deferred cleanup timing
dotnet_diagnostic.THROWS024.severity = suggestion

# ----------------------------------------
# Category 5: Lambda Exception Patterns
# ----------------------------------------

# THROWS025: Lambda uncaught exception
# Lambda expression (LINQ, Task.Run, etc.) throws uncaught exception
dotnet_diagnostic.THROWS025.severity = warning

# THROWS026: Event handler lambda exception
# Event handler lambda throws exception - may crash application
dotnet_diagnostic.THROWS026.severity = error

# ----------------------------------------
# Category 6: Best Practices
# ----------------------------------------

# THROWS027: Exception used for control flow
# Using exceptions for normal program flow - use conditional logic instead
dotnet_diagnostic.THROWS027.severity = warning

# THROWS028: Custom exception naming convention
# Custom exception type doesn't end with "Exception" suffix
dotnet_diagnostic.THROWS028.severity = warning

# THROWS029: Exception in hot path
# Throwing exceptions in loops - performance issue
dotnet_diagnostic.THROWS029.severity = warning

# THROWS030: Result pattern suggestion (informational)
# Consider using Result<T> pattern for expected validation errors
dotnet_diagnostic.THROWS030.severity = suggestion
end_of_line = crlf